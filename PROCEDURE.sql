/* ---- CREATE_ACCOUNT ---- */


CREATE OR REPLACE PROCEDURE CREATE_ACCOUNT 
(
  U_NAME IN VARCHAR2 
, U_EMAIL IN VARCHAR2 
) AS 
BEGIN
  INSERT INTO P_USER (USER_NAME, USER_EMAIL)
  VALUES(U_NAME, U_EMAIL);
END CREATE_ACCOUNT;


/* ---- Create_Account Function ---- */

CREATE [OR REPLACE] FUNCTION CREATE_ACCOUNT
(
	U_NAME IN VARCHAR2
,	U_EMAIL IN VARCHAR2
)
RETURN VARCHAR2
AS ACCOUNT_NAME V;
BEGIN
  INSERT INTO P_USER (USER_NAME, USER_EMAIL)
  VALUES(U_NAME, U_EMAIL);
  RETURN ACCOUNT_NUMBER
END CREATE_ACCOUNT;


/* ---- LIST_ACCOUNT_INFO ---- */

CREATE OR REPLACE PROCEDURE LIST_ACCOUNT_INFO 
(
  C_RESULTS in out SYS_REFCURSOR
) AS 
BEGIN
  OPEN C_RESULTS FOR
    SELECT USER_ID, USER_NAME FROM  P_USER;
END LIST_ACCOUNT_INFO ;


/* ---- FUNC_LIST_ACCOUNT_INFO ---- */

CREATE OR REPLACE FUNCTION FUNC_LIST_ACCOUNT_INFO 
(
  C_RESULTS in SYS_REFCURSOR
)
RETURN SYS_REFCURSOR
AS
C_RESULTS SYS_REFCURSOR;
BEGIN
  OPEN C_RESULTS FOR
    SELECT USER_ID, USER_NAME FROM  P_USER;
	Return C_RESULTS;
END LIST_ACCOUNT_INFO ;


/* ---- UPDATE_ACCOUNT_EMAIL ---- */

CREATE OR REPLACE PROCEDURE UPDATE_ACCOUNT_EMAIL
(
  U_NAME IN  VARCHAR2
, U_EMAIL IN VARCHAR2 
) AS 
BEGIN
  UPDATE P_USER 
    SET USER_EMAIL =  U_EMAIL
    WHERE USER_NAME = U_NAME;
END UPDATE_ACCOUNT_EMAIL;



/* ---- UPDATE_ACCOUNT_EMAIL ---- */

CREATE OR REPLACE FUNCTION UPDATE_ACCOUNT_EMAIL
(
  U_NAME IN  VARCHAR2
, U_EMAIL IN VARCHAR2 
) 
RETURN VARCHAR2
AS ACCOUNT_EMAIL VARCHAR2;
BEGIN
  UPDATE P_USER 
    SET USER_EMAIL =  U_EMAIL
    WHERE USER_NAME = U_NAME;
END UPDATE_ACCOUNT_EMAIL;
RETURN ACCOUNT_EMAIL;




/* ---- DELETE_ACCOUNT ---- */

CREATE OR REPLACE PROCEDURE DELETE_ACCOUNT
(
  U_NAME IN  VARCHAR2
) AS 
BEGIN
  DELETE from P_USER 
    WHERE USER_NAME = U_NAME;
END DELETE_ACCOUNT;


/* ---- CREATE_CATEGORY ---- */

CREATE OR REPLACE PROCEDURE CREATE_CATEGORY
(
  C_NAME IN VARCHAR2
) AS 
BEGIN
  INSERT INTO P_CATEGORY (CATEGORY_NAME)
  VALUES(C_NAME);
END CREATE_CATEGORY;



/* ---- LIST_CATEGORIES ---- */

CREATE OR REPLACE PROCEDURE LIST_CATEGORIES 
(
  C_RESULTS in out SYS_REFCURSOR
) AS 
BEGIN
  OPEN C_RESULTS FOR
    SELECT CATEGORY_ID, CATEGORY_NAME FROM  P_CATEGORY;
END LIST_CATEGORIES;
/* --------------------------------------------
	variable rc refcursor;
	exec LIST_CATEGORIES( :rc );
	print rc;
   -------------------------------------------- */


/* ---- FUNC_LIST_CATEGORIES ---- */

CREATE OR REPLACE FUNCTION FUNC_LIST_CATEGORIES 
(
  C_RESULTS in SYS_REFCURSOR
) 
RETURN SYS_REFCURSOR
AS C_RESULTS SYS_REFCURSOR
BEGIN
  OPEN C_RESULTS FOR
    SELECT CATEGORY_ID, CATEGORY_NAME FROM  P_CATEGORY;
	RETURN C_RESULTS;
END FUNC_LIST_CATEGORIES;
/* --------------------------------------------
	variable rc refcursor;
	exec LIST_CATEGORIES( :rc );
	print rc;
   -------------------------------------------- */   
   

/* ---- LIST_INGREDIENTS ---- */

CREATE OR REPLACE PROCEDURE LIST_INGREDIENTS 
(
  C_RESULTS in out SYS_REFCURSOR
) AS 
BEGIN
  OPEN C_RESULTS FOR
    SELECT ING_ID, ING_NAME FROM  P_INGREDIENT;
END LIST_INGREDIENTS;



/* ---- CREATE_RECIPE ---- */

CREATE OR REPLACE PROCEDURE CREATE_RECIPE 
(
  U_ID IN NUMBER 
, C_ID IN NUMBER
, R_Name IN VARCHAR2
, C_TIME IN VARCHAR2
, S_NUM IN NUMBER
, DESCRIP IN VARCHAR2 
) AS 
BEGIN
  INSERT INTO P_RECIPE (USER_ID, CATEGORY_ID, RECIPE_NAME, COOKING_TIME, SERVING_NUM, DESCRIPTION )
  VALUES(U_ID, C_ID, R_NAME, C_TIME, S_NUM, DESCRIP);
END CREATE_RECIPE;

/* ---- LIST_RECIPES ---- */
create or replace PROCEDURE LIST_RECIPES
(
  R_ID IN NUMBER DEFAULT null
, U_ID IN NUMBER DEFAULT null
, R_Name IN VARCHAR2 DEFAULT null
, C_RESULTS in out SYS_REFCURSOR
) AS 
BEGIN
  OPEN C_RESULTS FOR
    SELECT a.RECIPE_ID, a.USER_ID, c.USER_Name, b.CATEGORY_NAME, a.RECIPE_NAME, 
	a.COOKING_TIME, a.SERVING_NUM, a.DESCRIPTION
	from P_RECIPE a, P_CATEGORY b, P_USER c
    where a.CATEGORY_ID = b.CATEGORY_ID
	AND	  a.USER_ID = c.USER_ID
	AND   (R_ID is null OR a.RECIPE_ID=R_ID) 
    AND   (U_ID is null OR a.USER_ID=U_ID)
    AND	  (R_Name is null OR a.RECIPE_NAME=R_Name)
	ORDER BY a.RECIPE_NAME;
END LIST_RECIPES;


/* ---- SEARCH_RECIPES ---- */
create or replace PROCEDURE SEARCH_RECIPES
(
  U_ID  IN NUMBER DEFAULT null
, C_ID  IN NUMBER DEFAULT null
, ING_D IN NUMBER DEFAULT null
, C_RESULTS in out SYS_REFCURSOR
) AS 
BEGIN
  OPEN C_RESULTS FOR
    SELECT DISTINCT RECIPE_NAME, COOKING_TIME,
		SERVING_NUM, DESCRIPTION
	from P_RECIPE a, P_INGREDIENT_ITEM b
    where a.RECIPE_ID = b.RECIPE_ID
    AND   (U_ID is null OR U_ID < 0 OR a.USER_ID=U_ID)
	AND   (C_ID is null OR C_ID < 0 OR a.CATEGORY_ID=C_ID)
    AND	  (ING_D is null OR ING_D < 0 OR b.ING_ID=ING_D)
	ORDER BY RECIPE_NAME;
END SEARCH_RECIPES;


/* ---- ADD_INGREDIENT_ITEM ---- */
CREATE OR REPLACE PROCEDURE ADD_INGREDIENT_ITEM
(
  R_ID IN NUMBER 
, ING_D IN NUMBER 
, ING_Q IN NUMBER 
, ING_U IN VARCHAR2 
) AS 
BEGIN
  INSERT INTO P_INGREDIENT_ITEM (RECIPE_ID,ING_ID,ING_QUANTITY,ING_UNIT)
  VALUES(R_ID,ING_D,ING_Q,ING_U);
END ADD_INGREDIENT_ITEM;



/* ---- LIST_INGREDIENT_ITEMS ---- */

CREATE OR REPLACE PROCEDURE LIST_INGREDIENT_ITEMS 
(
  R_ID IN NUMBER
, C_RESULTS in out SYS_REFCURSOR
) AS 
BEGIN
  OPEN C_RESULTS FOR
    SELECT b.ING_Name, a.ING_QUANTITY, a.ING_UNIT 
	FROM  P_INGREDIENT_ITEM a, P_INGREDIENT b
	where a.ING_ID=b.ING_ID
	AND RECIPE_ID=R_ID
	ORDER BY ING_Name;
END LIST_INGREDIENT_ITEMS;



/* ---- DELETE_RECIPE ---- */
CREATE OR REPLACE PROCEDURE DELETE_RECIPE
(
  R_ID IN NUMBER
) AS 
BEGIN
  DELETE FROM P_INGREDIENT_ITEM 
  WHERE RECIPE_ID=R_ID;
  DELETE FROM P_RECIPE 
  WHERE RECIPE_ID=R_ID;
END DELETE_RECIPE;


